{
    "version": "2.0.0",
    "tasks": [
        {
            "label": "MongoSQL: Run Phase 1 Tests",
            "type": "shell",
            "command": "python",
            "args": ["QA/mariadb_comparison_qa.py", "--phase", "1"],
            "group": {
                "kind": "test",
                "isDefault": true
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            },
            "problemMatcher": [],
            "detail": "Run all Phase 1 core SQL compatibility tests (69 tests)"
        },
        {
            "label": "MongoSQL: Run Phase 2 Tests",
            "type": "shell",
            "command": "python",
            "args": ["QA/mariadb_comparison_qa.py", "--phase", "2"],
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            },
            "problemMatcher": [],
            "detail": "Run all Phase 2 modern extension tests (JSON, Extended String, Enhanced Aggregate)"
        },
        {
            "label": "MongoSQL: Test Specific Category",
            "type": "shell",
            "command": "python",
            "args": ["QA/mariadb_comparison_qa.py", "--category", "${input:testCategory}", "--verbose"],
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            },
            "problemMatcher": [],
            "detail": "Run tests for a specific category with verbose output"
        },
        {
            "label": "MongoSQL: Execute Query",
            "type": "shell",
            "command": "./mongosql",
            "args": ["classicmodels", "-e", "${input:sqlQuery}"],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            },
            "problemMatcher": [
                {
                    "pattern": {
                        "regexp": "^ERROR (\\d+) \\((\\w+)\\): (.*)$",
                        "message": 3
                    }
                }
            ],
            "detail": "Execute a SQL query using the MongoSQL CLI"
        },
        {
            "label": "MongoSQL: Format All Python Files",
            "type": "shell",
            "command": "python",
            "args": ["-m", "black", "src/", "QA/", "--line-length=120"],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            },
            "problemMatcher": [],
            "detail": "Format all Python files using Black formatter"
        },
        {
            "label": "MongoSQL: Lint All Python Files",
            "type": "shell",
            "command": "python",
            "args": ["-m", "pylint", "src/", "--rcfile=.pylintrc"],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            },
            "problemMatcher": [
                {
                    "pattern": {
                        "regexp": "^([^:]+):(\\d+):(\\d+): ([WE]\\d+): (.*)$",
                        "file": 1,
                        "line": 2,
                        "column": 3,
                        "severity": 4,
                        "message": 5
                    }
                }
            ],
            "detail": "Run pylint on all Python source files"
        },
        {
            "label": "MongoSQL: Check MongoDB Connection",
            "type": "shell",
            "command": "python",
            "args": ["-c", "from dotenv import load_dotenv; load_dotenv(); from src.database.mongodb_client import MongoDBClient; import os; client = MongoDBClient(host=os.getenv('MONGO_HOST'), username=os.getenv('MONGO_USERNAME'), password=os.getenv('MONGO_PASSWORD'), database='classicmodels'); client.connect(); print('âœ… MongoDB connection successful')"],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            },
            "problemMatcher": [],
            "detail": "Test MongoDB connection using environment variables"
        },
        {
            "label": "MongoSQL: Generate Function Mapping Report",
            "type": "shell",
            "command": "python",
            "args": ["-c", "from src.functions.function_mapper import FunctionMapper; fm = FunctionMapper(); print('ðŸ“Š Function Mapping Status:'); print(f'Date/Time: {len(fm.datetime_mapper.function_map)} functions'); print(f'String: {len(fm.string_mapper.function_map)} functions'); print(f'Math: {len(fm.math_mapper.function_map)} functions'); print(f'Aggregate: {len(fm.aggregate_mapper.function_map)} functions')"],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            },
            "problemMatcher": [],
            "detail": "Generate a report of implemented function mappings"
        }
    ],
    "inputs": [
        {
            "id": "testCategory",
            "description": "Select test category",
            "type": "pickString",
            "options": [
                "datetime",
                "string",
                "math",
                "aggregate",
                "joins",
                "groupby",
                "orderby",
                "distinct",
                "conditional",
                "subqueries",
                "json",
                "extended_string",
                "enhanced_aggregate"
            ]
        },
        {
            "id": "sqlQuery",
            "description": "Enter SQL query to execute",
            "type": "promptString",
            "default": "SELECT COUNT(*) FROM customers"
        }
    ]
}
